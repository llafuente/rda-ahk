console.log("BUILD single HTML page");

const fs = require("fs");
const package = require("../package.json");

filesPath = __dirname + "\\html\\files";
homePath = __dirname + "\\html\\other\\home.html";

let mainCSSFile = fs.readFileSync(__dirname + "\\html\\styles\\main.css", {"encoding": "utf8"});
let DefaultCSSFile = fs.readFileSync(__dirname + "\\html\\styles\\Default\\Default.css", {"encoding": "utf8"});

function readdirSyncRecursive(filesPath) {
  let list = fs.readdirSync(filesPath, {withFileTypes: true});
  for (const file of list) {
    file.name = filesPath + "\\" + file.name;
    // console.log(file);
    if (file.isDirectory()) {
      list = list.concat(readdirSyncRecursive(file.name));
    }
  }
  return list
}

let list = readdirSyncRecursive(filesPath).sort();

list = list.map(x => x.name).filter((x) => x.indexOf(".html") !== -1)

fs.writeFileSync(__dirname + "/index.html", `<html>
<head>
  <style>
  ${mainCSSFile}
  </style>
  <style>
  ${DefaultCSSFile}
  </style>
  <style>
body {
  padding: 2rem;
  background-image: none !important;
  background-color: #fff !important;
}

.page-break {
  page-break-after: always;
}

.CTopic {
  page-break-inside: avoid;
}

.TClass > .CTitle::before,
.TFunction > .CTitle::before,
.TProperty > .CTitle::before,
.TConstant > .CTitle::before
{
    content: "property";
    background: #E2E2FF;
    padding: 6px;
    border-radius: 4px;
    display: inline-block;
    margin-right: 16px;
}

.TClass > .CTitle::before {
    content: "class";
}
.TFunction > .CTitle::before {
    content: "function";
}
.TProperty > .CTitle::before {
    content: "property";
}
.TConstant > .CTitle::before {
    content: "constant";
}
.TClass ~ .CTopic {
  margin-left: 16px;
}
.TClass {
  margin-left: 0 !important;
}
.TClass ~ .TFunction > .CTitle::before {
  content: "method";
}
.CBody {
  margin-left: 2.25em;
}
  </style>
</head>

<div class="HFrame"><div class="HContent">
  <div class="HTitle">${package.name}<br />${package.version}</div>
  <div class="HSubtitle">${package.description}</div>

<div class="HFooter"><div class="HGeneratedBy"><a href="http://www.naturaldocs.org" target="_blank">Generated by Natural Docs</a></div></div></div></div>
<div class="page-break"></div>

`, {"encoding": "utf8"});

//const homeContents = fs.readFileSync(homePath, {"encoding": "utf8"});
//fs.appendFileSync(__dirname + "/index.html", homeContents, {"encoding": "utf8"});

fs.appendFileSync(__dirname + "/index.html", `
<h1>Source documentation</h1>
`, {"encoding": "utf8"});

list.forEach((x, idx) => {
  console.log(x);

  let contents = fs.readFileSync(x, {"encoding": "utf8"});

  //contents = contents.replace(/href\=\"(.*?)\/index\.html#File\:(.*?)\:(.*?)\"/g, "href=\"#$3\"");
  contents = contents.replace(/href\=\"([^\"]*)\/index\.html#File\:([^\"]*)\:([^\"]*)\"/g, "href=\"#$3\"");

  // clear unused HTML
  //<a name="Topic250"></a>
  contents = contents.replace(/\<a name="Topic\d+"><\/a>/g, "");
  contents = contents.replace(/onmouseover="([^\"]*)"/g, "");
  contents = contents.replace(/onmouseout="([^\"]*)"/g, "");
  contents = contents.replace(/id="NDPrototype\d+"/g, "");

  contents = contents.split("\n");
  // remove unwanted
  contents = contents.slice(9, contents.length - 1);

  contents.unshift(`<div class="page">`);
  contents.push(`</div>`);

  if (idx > 0) {
    contents.unshift(`<div class="page-break"></div>`);
  }


  contents = contents.join("\n");
  fs.appendFileSync(__dirname + "/index.html", contents, {"encoding": "utf8"});
})
